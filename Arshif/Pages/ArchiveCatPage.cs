using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Arshif.Pages
{
    public partial class ArchiveCatPage : DevExpress.XtraEditors.XtraUserControl
    {
        // database and tables
        DBAREntities db;
        TBArchiveCategory tbadd;

        int id;
        bool state;
        private string UserRole,UserDep;
        public ArchiveCatPage()
        {
            InitializeComponent();
            UserRole=Properties.Settings.Default.UserRole;
            UserDep = Properties.Settings.Default.UserDep;
            LoadData();
               }

        // load data 
        public void LoadData()
        {
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
            this.entityInstantFeedbackSource1.Refresh();
        }


        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            // Instantiate a new DataContext
            Arshif.DBAREntities dataContext = new Arshif.DBAREntities();
            // Assign a queryable source to the EntityInstantFeedbackSource
            // userrole == مدير
            if (UserRole == "مدير")
            {
                e.QueryableSource = dataContext.TBArchiveCategories;

            }
            else
            {
                e.QueryableSource = dataContext.TBArchiveCategories.Where(x=>x.UserDep==UserDep);

            }
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            // Dispose of the DataContext
            ((Arshif.DBAREntities)e.Tag).Dispose();
        }
        //add
        private void btn_add_Click(object sender, EventArgs e)
        {
            AddPage.AddArchiveCategory add = new AddPage.AddArchiveCategory();
            add.btn_add.Text = "اضافة";
            add.id = 0;
            add.page = this;
            add.Show();
        }
        //edit
        private void btn_edit_Click(object sender, EventArgs e)
        {
            try {

                id = Convert.ToInt32(tileView1.GetFocusedRowCellValue("ID"));
                if (id > 0)
                {
                    // edit
                    AddPage.AddArchiveCategory add = new AddPage.AddArchiveCategory();
                    add.btn_add.Text = "تعديل";
                    add.id = id;
                    add.edt_name.Text = Convert.ToString(tileView1.GetFocusedRowCellValue("ArchiveTitle"));
                    add.edt_details.Text = Convert.ToString(tileView1.GetFocusedRowCellValue("ArchiveDes"));
                    add.page = this;
                    add.Show();
                }
                else
                {
                    MessageBox.Show("لا بيانات لتعديلها");
                }
            }
            catch(Exception ex){
                    MessageBox.Show("خطأ في العملية", ex.Message, MessageBoxButtons.OK, MessageBoxIcon.Error);

            }


        }
        // delete
        private async void btn_delete_Click(object sender, EventArgs e)
        {
            try
            {

                id = Convert.ToInt32(tileView1.GetFocusedRowCellValue("ID"));
                if (id > 0)
                {

                    var resutl = MessageBox.Show("اجراء حذف", "هل انت متأكد من هذا الاجراء", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (resutl == DialogResult.Yes)
                    {
                        // delete
                        // loading
                        loading.Visible = true;
                        tbadd = new TBArchiveCategory
                        {
                            ID = id,
                        };
                        var rs = await Task.Run(() => Delete(tbadd));
                        if (rs == true)
                        {
                            LoadData();
                            toastNotificationsManager1.ShowNotification("9953fd39-6ba8-4c1d-a304-138c8944a086");
                        }
                        else
                        {
                            MessageBox.Show("خطأ في الاتصال", "تأكد من الاتصال في السيرفر", MessageBoxButtons.OK, MessageBoxIcon.Error);

                        }
                        // end
                        loading.Visible = false;

                    }
                    else
                    {
                        MessageBox.Show("لا بيانات لحذفها");
                    }
                }
                
            }
            catch (Exception ex)
            {
                MessageBox.Show("خطأ في العملية", ex.Message, MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
        }
        // delete method
        private bool Delete(TBArchiveCategory data)
        {
            try
            {
                db = new DBAREntities();
                db.Entry(data).State=System.Data.Entity.EntityState.Deleted;
                db.SaveChanges();
                state = true;
            }
            catch
            {

                state = false;
            }
            return state;
        }

        private void tileView1_ItemDoubleClick(object sender, DevExpress.XtraGrid.Views.Tile.TileViewItemClickEventArgs e)
        {
            try {
                PL.ArchiveFileForm archive=new PL.ArchiveFileForm();
                id = Convert.ToInt32(tileView1.GetFocusedRowCellValue("ID"));
                archive.lb_id.Text=id.ToString();
                archive.ArchiveID = id;
                archive.lb_archivename.Text= Convert.ToString(tileView1.GetFocusedRowCellValue("ArchiveTitle"));
                archive.lb_archdep.Text= Convert.ToString(tileView1.GetFocusedRowCellValue("UserDep"));
                archive.Show();
            
            }
            catch { }
        }

        private void btn_print_Click(object sender, EventArgs e)
        {
            gridControl1.ShowPrintPreview();
        }
    }
}

