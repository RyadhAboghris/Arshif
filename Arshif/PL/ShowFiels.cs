using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;

namespace Arshif.PL
{
    public partial class ShowFiels : DevExpress.XtraEditors.XtraForm
    {

        // database and tables
        TBArchiveFile tbadd;
        DBAREntities db;
        // other var
        public int ArchiveID;
        public int id;
        bool state;
        string fileName, fileExt,path;
        byte[] fileFile;

        public ShowFiels()
        {
            InitializeComponent();
            LoadData();
        }

        public void LoadData()
        {    // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource2.GetQueryable += entityInstantFeedbackSource2_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource2.DismissQueryable += entityInstantFeedbackSource2_DismissQueryable;
            this.entityInstantFeedbackSource2.Refresh();
        }



        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource2_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            // Instantiate a new DataContext
            Arshif.DBAREntities dataContext = new Arshif.DBAREntities();
            // Assign a queryable source to the EntityInstantFeedbackSource
            e.QueryableSource = dataContext.TBArchiveFiles.Where(x => x.ID == id).Select(x => new
            {
                x.ID,x.FileExt1,x.FileExt2,x.FileExt3,x.FileExt4,x.FileExt5,
                x.FileName1,x.FileName2,x.FileName3,x.FileName4,x.FileName5,
            });
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource2_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            // Dispose of the DataContext
            ((Arshif.DBAREntities)e.Tag).Dispose();
        }

        private void ShowFiels_Load(object sender, EventArgs e)
        {

        }

        private async void btn_1_Click(object sender, EventArgs e)
        {
            var extFile = gridView1.GetRowCellValue(0, "FileName1");
            if(extFile == null)
            {
                MessageBox.Show("لا يوجد ملف");

            }
            else
            {
                loading.Visible = true;
                var rs = await Task.Run(() => WriteFile1());
                if (rs == true)
                {
                    Process.Start(path);
                }
                else
                {
                    MessageBox.Show("لا يمكن كتابة الملف");
                }
                loading.Visible = false;
            }
           
        }


        private bool WriteFile1()
        {
            try
            {
                db = new DBAREntities();
                fileName = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileName1).FirstOrDefault();
                fileExt = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileExt1).FirstOrDefault();
                fileFile = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileFile1).FirstOrDefault();
                path =@".\Files\"+fileName+fileExt;
                File.WriteAllBytes(path, fileFile);
                
                state = true;    
            } catch { state = false; }

            return state;
        }
        private bool WriteFile2()
        {
            try
            {
                db = new DBAREntities();
                fileName = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileName2).FirstOrDefault();
                fileExt = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileExt2).FirstOrDefault();
                fileFile = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileFile2).FirstOrDefault();
                path = @".\Files\" + fileName + fileExt;
                File.WriteAllBytes(path, fileFile);

                state = true;
            }
            catch { state = false; }

            return state;
        }
        private bool WriteFile3()
        {
            try
            {
                db = new DBAREntities();
                fileName = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileName3).FirstOrDefault();
                fileExt = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileExt3).FirstOrDefault();
                fileFile = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileFile3).FirstOrDefault();
                path = @".\Files\" + fileName + fileExt;
                File.WriteAllBytes(path, fileFile);

                state = true;
            }
            catch { state = false; }

            return state;
        }

        private async void btn_2_Click(object sender, EventArgs e)
        {
            var extFile = gridView1.GetRowCellValue(0, "FileName2");
            if (extFile == null)
            {
                MessageBox.Show("لا يوجد ملف");

            }
            else
            {
                loading.Visible = true;
                var rs = await Task.Run(() => WriteFile2());
                if (rs == true)
                {
                    Process.Start(path);
                }
                else
                {
                    MessageBox.Show("لا يمكن كتابة الملف");
                }
                loading.Visible = false;
            }
        }

        private async void btn_3_Click(object sender, EventArgs e)
        {
            var extFile = gridView1.GetRowCellValue(0, "FileName3");
            if (extFile == null)
            {
                MessageBox.Show("لا يوجد ملف");

            }
            else
            {
                loading.Visible = true;
                var rs = await Task.Run(() => WriteFile3());
                if (rs == true)
                {
                    Process.Start(path);
                }
                else
                {
                    MessageBox.Show("لا يمكن كتابة الملف");
                }
                loading.Visible = false;
            }
        }

        private async void btn_4_Click(object sender, EventArgs e)
        {
            var extFile = gridView1.GetRowCellValue(0, "FileName4");
            if (extFile == null)
            {
                MessageBox.Show("لا يوجد ملف");

            }
            else
            {
                loading.Visible = true;
                var rs = await Task.Run(() => WriteFile4());
                if (rs == true)
                {
                    Process.Start(path);
                }
                else
                {
                    MessageBox.Show("لا يمكن كتابة الملف");
                }
                loading.Visible = false;
            }
        }

        private async void btn_5_Click(object sender, EventArgs e)
        {
            var extFile = gridView1.GetRowCellValue(0, "FileName5");
            if (extFile == null)
            {
                MessageBox.Show("لا يوجد ملف");

            }
            else
            {
                loading.Visible = true;
                var rs = await Task.Run(() => WriteFile5());
                if (rs == true)
                {
                    Process.Start(path);
                }
                else
                {
                    MessageBox.Show("لا يمكن كتابة الملف");
                }
                loading.Visible = false;
            }
        }

        private void btn_showfolder_Click(object sender, EventArgs e)
        {
            Process.Start(@".\Files");
        }

        private bool WriteFile4()
        {
            try
            {
                db = new DBAREntities();
                fileName = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileName4).FirstOrDefault();
                fileExt = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileExt4).FirstOrDefault();
                fileFile = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileFile4).FirstOrDefault();
                path = @".\Files\" + fileName + fileExt;
                File.WriteAllBytes(path, fileFile);

                state = true;
            }
            catch { state = false; }

            return state;
        }
        private bool WriteFile5()
        {
            try
            {
                db = new DBAREntities();
                fileName = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileName5).FirstOrDefault();
                fileExt = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileExt5).FirstOrDefault();
                fileFile = db.TBArchiveFiles.Where(x => x.ID == id).Select(x => x.FileFile5).FirstOrDefault();
                path = @".\Files\" + fileName + fileExt;
                File.WriteAllBytes(path, fileFile);

                state = true;
            }
            catch { state = false; }

            return state;
        }
    }

     

       
             
    } 
